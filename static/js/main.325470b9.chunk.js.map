{"version":3,"sources":["components/contactList/ContactList.module.css","components/section/Section.js","redux/contacts/phoneBookActions.js","redux/contacts/phoneBookTypes.js","redux/contacts/phoneBookOperations.js","components/contactForm/ContactForm.js","redux/contacts/phoneBookSelectors.js","components/contactList/ContactList.js","components/filter/Filter.js","components/App.js","redux/contacts/phoneBookReducers.js","redux/store.js","index.js","components/contactForm/ContactForm.module.css"],"names":["module","exports","Section","title","children","getContactsSuccess","createAction","addNewContactSuccess","deleteContactSuccess","filterName","getContactsError","addNewContactError","deleteContactError","removeError","getContactsRequest","addNewContactRequest","deleteContactRequest","axios","defaults","baseURL","initialState","name","number","ContactForm","useState","state","setState","dispatch","useDispatch","onHandleChange","e","target","value","prev","onSubmit","preventDefault","contact","id","uuidv4","arg","post","then","data","catch","error","className","form","label","input","type","onChange","pattern","loadingSelector","loader","errorSelector","getSomeContactsSelector","contacts","contactsList","filter","toLowerCase","includes","ContactList","filteredContacts","useSelector","removeContact","delete","deleteContactOperation","ul","map","item","p","onClick","mapDispatchToProps","connect","App","useEffect","get","contactsReducer","createReducer","action","payload","errorReducer","loaderReducer","phoneBookReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.325470b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ul\":\"ContactList_ul__bRoV3\",\"p\":\"ContactList_p__3Df9Y\"};","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Section = ({title, children}) => {\r\n    return (\r\n        <section>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </section>\r\n    );\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Section;","import { createAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n  GETCONTACTSSUCCESS,\r\n  ADDNEWCONTACTSUCCESS,\r\n  DELETECONTACTSUCCESS,\r\n  FILTERNAME,\r\n  GETCONTACTSERROR,\r\n  ADDNEWCONTACTERROR,\r\n  DELETECONTACTERROR,\r\n  REMOVEERROR,\r\n  GETCONTACTSREQUEST,\r\n  ADDNEWCONTACTREQUEST,\r\n  DELETECONTACTREQUEST,\r\n} from \"./phoneBookTypes\";\r\n\r\nconst getContactsSuccess = createAction(GETCONTACTSSUCCESS);\r\nconst addNewContactSuccess = createAction(ADDNEWCONTACTSUCCESS);\r\nconst deleteContactSuccess = createAction(DELETECONTACTSUCCESS);\r\nconst filterName = createAction(FILTERNAME);\r\n\r\nconst getContactsError = createAction(GETCONTACTSERROR)\r\nconst addNewContactError = createAction(ADDNEWCONTACTERROR)\r\nconst deleteContactError = createAction(DELETECONTACTERROR);\r\nconst removeError = createAction(REMOVEERROR)\r\n\r\nconst getContactsRequest = createAction(GETCONTACTSREQUEST)\r\nconst addNewContactRequest = createAction(ADDNEWCONTACTREQUEST)\r\nconst deleteContactRequest = createAction(DELETECONTACTREQUEST)\r\n\r\nexport {\r\n  addNewContactSuccess,\r\n  deleteContactSuccess,\r\n  getContactsSuccess,\r\n  filterName,\r\n  getContactsError,\r\n  addNewContactError,\r\n  deleteContactError,\r\n  removeError,\r\n  getContactsRequest,\r\n  addNewContactRequest,\r\n  deleteContactRequest,\r\n};\r\n","const GETCONTACTSSUCCESS = \"contacts/getContactsSuccess\";\r\nconst ADDNEWCONTACTSUCCESS = \"contacts/addNewContactSuccess\";\r\nconst DELETECONTACTSUCCESS = \"contacts/deleteContactSuccess\";\r\nconst FILTERNAME = \"name/filterName\";\r\n\r\nconst GETCONTACTSERROR = \"error/getContactsError\";\r\nconst ADDNEWCONTACTERROR = \"error/addNewContactError\";\r\nconst DELETECONTACTERROR = \"error/deleteContactError\";\r\nconst REMOVEERROR = \"error/removeError\";\r\n\r\nconst GETCONTACTSREQUEST = \"loader/getContactsRequest\";\r\nconst ADDNEWCONTACTREQUEST = \"loader/addNewContactRequest\";\r\nconst DELETECONTACTREQUEST = \"loader/deleteContactRequest\";\r\n\r\n\r\n\r\n\r\nexport {\r\n  GETCONTACTSSUCCESS,\r\n  ADDNEWCONTACTSUCCESS,\r\n  DELETECONTACTSUCCESS,\r\n  FILTERNAME,\r\n  GETCONTACTSERROR,\r\n  ADDNEWCONTACTERROR,\r\n  DELETECONTACTERROR,\r\n  REMOVEERROR,\r\n  GETCONTACTSREQUEST,\r\n  ADDNEWCONTACTREQUEST,\r\n  DELETECONTACTREQUEST,\r\n};\r\n","import axios from \"axios\";\r\n\r\nimport {\r\n  addNewContactSuccess,\r\n  deleteContactSuccess,\r\n  getContactsSuccess,\r\n  getContactsError,\r\n  addNewContactError,\r\n  deleteContactError,\r\n  getContactsRequest,\r\n  addNewContactRequest,\r\n  deleteContactRequest,\r\n} from \"./phoneBookActions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4000\";\r\n\r\nexport const getContactsOperation = () => (dispatch) => {\r\n  dispatch(getContactsRequest());\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(getContactsSuccess(data)))\r\n    .catch(() => dispatch(getContactsError()));\r\n};\r\n\r\nexport const addNewContactOperation = (contact) => (dispatch) => {\r\n  dispatch(addNewContactRequest());\r\n  axios\r\n    .post(\"/contacts/\", contact)\r\n    .then(({ data }) => dispatch(addNewContactSuccess(data)))\r\n    .catch((error) => {\r\n      dispatch(addNewContactError(error));\r\n    });\r\n};\r\n\r\nexport const deleteContactOperation = (id) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch((error) => {\r\n      dispatch(deleteContactError(error));\r\n    });\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { form, label, input } from \"./ContactForm.module.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addNewContactOperation } from \"../../redux/contacts/phoneBookOperations\";\r\n\r\nconst initialState = {\r\n  name: \"\",\r\n  number: \"\",\r\n};\r\n\r\nconst ContactForm = () => {\r\n  const [state, setState] = useState({ ...initialState });\r\n  const dispatch = useDispatch();\r\n\r\n  const onHandleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const id = uuidv4()\r\n    const arg = {...state, id}\r\n    dispatch(addNewContactOperation(arg));\r\n    setState({ ...initialState });\r\n  };\r\n\r\n  const onHandleChange = (e) => {\r\n    const { value, name } = e.target;\r\n    setState((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onHandleSubmit} className={form}>\r\n        <label className={label}>\r\n          Name\r\n          <input\r\n            className={input}\r\n            type=\"text\"\r\n            onChange={onHandleChange}\r\n            value={state.name}\r\n            name=\"name\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            className={input}\r\n            type=\"text\"\r\n            onChange={onHandleChange}\r\n            value={state.number}\r\n            name=\"number\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={input}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","export const initialStateSelector = (state) => state.contacts.contactsList\r\nexport const loadingSelector = (state) => state.loader\r\nexport const errorSelector = (state) => state.error\r\n\r\nexport const getSomeContactsSelector = (state) => {\r\n    if (state.contacts.filterName)\r\n        return [...state.contacts.contactsList.filter(({ name }) =>\r\n            name.toLowerCase().includes(state.contacts.filterName)\r\n        )]\r\n      \r\n    return state.contacts.contactsList\r\n};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ul, p } from \"./ContactList.module.css\";\r\nimport { deleteContactOperation} from \"../../redux/contacts/phoneBookOperations\";\r\nimport { getSomeContactsSelector,  } from \"../../redux/contacts/phoneBookSelectors\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst ContactList = () => {\r\n  const filteredContacts = useSelector(getSomeContactsSelector);\r\n  const dispatch = useDispatch()\r\n  const removeContact = (id) => {\r\n    dispatch(deleteContactOperation(id))\r\n  }\r\n\r\n  return (\r\n    <ul className={ul}>\r\n      {filteredContacts.map((item) => (\r\n        <li key={item.id}>\r\n          <p className={p}>\r\n            {item.name}: {item.number}\r\n          </p>\r\n          <button\r\n            type=\"button\"\r\n            id={item.id}\r\n            onClick={() => removeContact(item.id)}\r\n          >\r\n            Delete Contact\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.func.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n// const mapStateToProps = (state) => {\r\n//   if (state.contacts.filterName)\r\n//     return {contacts: state.contacts.contactsList.filter(({ name }) => name.toLowerCase().includes(state.contacts.filterName)) };\r\n//   return {contacts: state.contacts.contactsList}\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//   deleteContact,\r\n// };\r\n\r\nexport default ContactList;\r\n// export default connect(getSomeContactsSelector, mapDispatchToProps)(ContactList);\r\n// getContactsOperation: () => dispatch(getContacts()),\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { filterName } from \"../../redux/contacts/phoneBookActions\";\r\n\r\nconst Filter = ({ filterName }) => {\r\n  // const [value, setValue] = useState(\"\");\r\n  const setFilter = ({ target }) => {\r\n      const { value } = target;\r\n      filterName(value);\r\n  };\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      onChange={setFilter}\r\n      // value={filter}\r\n    />\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  setFilter: PropTypes.func.isRequired,\r\n  filter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  filterName,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Filter);\r\n","import React, { useEffect } from \"react\";\r\nimport Section from \"./section/Section\";\r\nimport ContactForm from \"./contactForm/ContactForm\";\r\nimport ContactList from \"./contactList/ContactList\";\r\nimport Filter from \"./filter/Filter\";\r\nimport { getContactsOperation } from \"../redux/contacts/phoneBookOperations\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { errorSelector, loadingSelector } from \"../redux/contacts/phoneBookSelectors\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const loader = useSelector(loadingSelector);\r\n  const error = useSelector(errorSelector);\r\n  useEffect(() => {\r\n    dispatch(getContactsOperation());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      {!loader && !error && (\r\n        <>\r\n          <Section title={\"Phonebook\"}>\r\n            <ContactForm />\r\n          </Section>\r\n          <Section title={\"Contacts\"}>\r\n            <Filter />\r\n            <ContactList />\r\n          </Section>\r\n        </>\r\n      )}\r\n      {loader && <p>...Loading</p>}\r\n      {error && <p>Something is wrong</p>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addNewContactSuccess,\r\n  deleteContactSuccess,\r\n  getContactsSuccess,\r\n  filterName,\r\n  getContactsError,\r\n  addNewContactError,\r\n  deleteContactError,\r\n  removeError,\r\n  getContactsRequest,\r\n  addNewContactRequest,\r\n  deleteContactRequest,\r\n} from \"./phoneBookActions\";\r\n\r\nconst initialState = {\r\n  contactsList: [],\r\n  filterName: \"\",\r\n};\r\n\r\nconst contactsReducer = createReducer(initialState, {\r\n  [getContactsSuccess]: (state, action) => ({\r\n    ...state,\r\n    contactsList: action.payload,\r\n  }),\r\n  [addNewContactSuccess]: (state, action) => ({\r\n    ...state,\r\n    contactsList: [...state.contactsList, action.payload],\r\n  }),\r\n  [deleteContactSuccess]: (state, action) => ({\r\n    ...state,\r\n    contactsList: state.contactsList.filter(\r\n      (contact) => contact.id !== action.payload\r\n    ),\r\n  }),\r\n  [filterName]: (state, action) => ({ ...state, filterName: action.payload }),\r\n});\r\n\r\nconst errorReducer = createReducer(false, {\r\n  [getContactsError]: () => true,\r\n  [addNewContactError]: () => true,\r\n  [deleteContactError]: () => true,\r\n  [removeError]: () => false,\r\n});\r\n\r\nconst loaderReducer = createReducer(false, {\r\n  [getContactsRequest]: () => true,\r\n  [addNewContactRequest]: () => true,\r\n  [deleteContactRequest]: () => true,\r\n\r\n  [getContactsSuccess]: () => false,\r\n  [addNewContactSuccess]: () => false,\r\n  [deleteContactSuccess]: () => false,\r\n});\r\n\r\nconst phoneBookReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n  error: errorReducer,\r\n  loader: loaderReducer,\r\n});\r\n\r\nexport default phoneBookReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport phoneBookReducer from \"./contacts/phoneBookReducers\";\r\n\r\nconst store = configureStore({ reducer: phoneBookReducer });\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2Om-A\",\"label\":\"ContactForm_label__4Z1IM\",\"input\":\"ContactForm_input__3bPW5\"};"],"sourceRoot":""}